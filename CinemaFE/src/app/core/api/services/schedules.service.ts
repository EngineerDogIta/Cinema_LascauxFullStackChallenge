/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createSchedule } from '../fn/schedules/create-schedule';
import { CreateSchedule$Params } from '../fn/schedules/create-schedule';
import { deleteSchedule } from '../fn/schedules/delete-schedule';
import { DeleteSchedule$Params } from '../fn/schedules/delete-schedule';
import { getAllSchedules } from '../fn/schedules/get-all-schedules';
import { GetAllSchedules$Params } from '../fn/schedules/get-all-schedules';
import { getHistoricalSchedules } from '../fn/schedules/get-historical-schedules';
import { GetHistoricalSchedules$Params } from '../fn/schedules/get-historical-schedules';
import { getOverlappingSchedules } from '../fn/schedules/get-overlapping-schedules';
import { GetOverlappingSchedules$Params } from '../fn/schedules/get-overlapping-schedules';
import { getScheduleById } from '../fn/schedules/get-schedule-by-id';
import { GetScheduleById$Params } from '../fn/schedules/get-schedule-by-id';
import { MovieSchedule } from '../models/movie-schedule';
import { updateSchedule } from '../fn/schedules/update-schedule';
import { UpdateSchedule$Params } from '../fn/schedules/update-schedule';
import { Void } from '../models/void';


/**
 * Endpoints for managing movie schedules
 */
@Injectable({ providedIn: 'root' })
export class SchedulesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getScheduleById()` */
  static readonly GetScheduleByIdPath = '/api/schedules/{id}';

  /**
   * Get a schedule by ID.
   *
   * Retrieves details for a specific movie schedule.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getScheduleById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getScheduleById$Response(params: GetScheduleById$Params, context?: HttpContext): Observable<StrictHttpResponse<MovieSchedule>> {
    return getScheduleById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a schedule by ID.
   *
   * Retrieves details for a specific movie schedule.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getScheduleById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getScheduleById(params: GetScheduleById$Params, context?: HttpContext): Observable<MovieSchedule> {
    return this.getScheduleById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MovieSchedule>): MovieSchedule => r.body)
    );
  }

  /** Path part for operation `updateSchedule()` */
  static readonly UpdateSchedulePath = '/api/schedules/{id}';

  /**
   * Update a schedule.
   *
   * Updates an existing movie schedule by its ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSchedule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSchedule$Response(params: UpdateSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<MovieSchedule>> {
    return updateSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a schedule.
   *
   * Updates an existing movie schedule by its ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSchedule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSchedule(params: UpdateSchedule$Params, context?: HttpContext): Observable<MovieSchedule> {
    return this.updateSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<MovieSchedule>): MovieSchedule => r.body)
    );
  }

  /** Path part for operation `deleteSchedule()` */
  static readonly DeleteSchedulePath = '/api/schedules/{id}';

  /**
   * Delete a schedule.
   *
   * Deletes a movie schedule identified by its ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSchedule()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSchedule$Response(params: DeleteSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<Void>> {
    return deleteSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a schedule.
   *
   * Deletes a movie schedule identified by its ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSchedule$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSchedule(params: DeleteSchedule$Params, context?: HttpContext): Observable<Void> {
    return this.deleteSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<Void>): Void => r.body)
    );
  }

  /** Path part for operation `getAllSchedules()` */
  static readonly GetAllSchedulesPath = '/api/schedules';

  /**
   * List all schedules.
   *
   * Retrieves a list of all movie schedules.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSchedules()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSchedules$Response(params?: GetAllSchedules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MovieSchedule>>> {
    return getAllSchedules(this.http, this.rootUrl, params, context);
  }

  /**
   * List all schedules.
   *
   * Retrieves a list of all movie schedules.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSchedules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSchedules(params?: GetAllSchedules$Params, context?: HttpContext): Observable<Array<MovieSchedule>> {
    return this.getAllSchedules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MovieSchedule>>): Array<MovieSchedule> => r.body)
    );
  }

  /** Path part for operation `createSchedule()` */
  static readonly CreateSchedulePath = '/api/schedules';

  /**
   * Create a new schedule.
   *
   * Creates a new movie schedule record.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSchedule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSchedule$Response(params: CreateSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<MovieSchedule>> {
    return createSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new schedule.
   *
   * Creates a new movie schedule record.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSchedule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSchedule(params: CreateSchedule$Params, context?: HttpContext): Observable<MovieSchedule> {
    return this.createSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<MovieSchedule>): MovieSchedule => r.body)
    );
  }

  /** Path part for operation `getOverlappingSchedules()` */
  static readonly GetOverlappingSchedulesPath = '/api/schedules/overlap';

  /**
   * Get overlapping schedules.
   *
   * Retrieves movie schedules that overlap a given date range. Query parameters 'startDate' and 'endDate' (in YYYY-MM-DD format) are required.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOverlappingSchedules()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverlappingSchedules$Response(params: GetOverlappingSchedules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MovieSchedule>>> {
    return getOverlappingSchedules(this.http, this.rootUrl, params, context);
  }

  /**
   * Get overlapping schedules.
   *
   * Retrieves movie schedules that overlap a given date range. Query parameters 'startDate' and 'endDate' (in YYYY-MM-DD format) are required.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOverlappingSchedules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOverlappingSchedules(params: GetOverlappingSchedules$Params, context?: HttpContext): Observable<Array<MovieSchedule>> {
    return this.getOverlappingSchedules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MovieSchedule>>): Array<MovieSchedule> => r.body)
    );
  }

  /** Path part for operation `getHistoricalSchedules()` */
  static readonly GetHistoricalSchedulesPath = '/api/schedules/historical';

  /**
   * Get historical schedules.
   *
   * Retrieves historical movie schedules.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHistoricalSchedules()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoricalSchedules$Response(params?: GetHistoricalSchedules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MovieSchedule>>> {
    return getHistoricalSchedules(this.http, this.rootUrl, params, context);
  }

  /**
   * Get historical schedules.
   *
   * Retrieves historical movie schedules.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHistoricalSchedules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoricalSchedules(params?: GetHistoricalSchedules$Params, context?: HttpContext): Observable<Array<MovieSchedule>> {
    return this.getHistoricalSchedules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MovieSchedule>>): Array<MovieSchedule> => r.body)
    );
  }

}
